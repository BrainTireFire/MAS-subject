// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230616102753_ADdMOtivator")]
    partial class ADdMOtivator
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("API.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MotivatorIdMotivator")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MotivatorIdMotivator");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("API.Entities.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("API.Entities.Motivator", b =>
                {
                    b.Property<int>("IdMotivator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Pseudonym")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdMotivator");

                    b.ToTable("Motivator", (string)null);

                    b.HasData(
                        new
                        {
                            IdMotivator = 1,
                            Name = "John Doe",
                            Pseudonym = "MotivatorX"
                        },
                        new
                        {
                            IdMotivator = 2,
                            Name = "Emily Smith",
                            Pseudonym = "InspireMe"
                        },
                        new
                        {
                            IdMotivator = 3,
                            Name = "David Johnson",
                            Pseudonym = "MotivateToday"
                        },
                        new
                        {
                            IdMotivator = 4,
                            Name = "Sarah Thompson",
                            Pseudonym = "PositiveVibes"
                        },
                        new
                        {
                            IdMotivator = 5,
                            Name = "Michael Rodriguez",
                            Pseudonym = "DreamAchiever"
                        });
                });

            modelBuilder.Entity("API.Entities.Plans.Diet.CompositionOfNutritionalValue", b =>
                {
                    b.Property<int>("IdCompositionOfNutritionalValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("IdDish")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("IdCompositionOfNutritionalValue");

                    b.ToTable("CompositionOfNutritionalValue", (string)null);

                    b.HasData(
                        new
                        {
                            IdCompositionOfNutritionalValue = 1,
                            Description = "High protein content in grilled chicken salad.",
                            IdDish = 1,
                            Name = "Protein"
                        },
                        new
                        {
                            IdCompositionOfNutritionalValue = 2,
                            Description = "Rich in dietary fiber due to various vegetables in stir-fry.",
                            IdDish = 2,
                            Name = "Fiber"
                        },
                        new
                        {
                            IdCompositionOfNutritionalValue = 3,
                            Description = "Salmon provides a good source of omega-3 fatty acids.",
                            IdDish = 3,
                            Name = "Omega-3"
                        },
                        new
                        {
                            IdCompositionOfNutritionalValue = 4,
                            Description = "Quinoa salad is packed with essential vitamins and minerals.",
                            IdDish = 4,
                            Name = "Vitamins"
                        },
                        new
                        {
                            IdCompositionOfNutritionalValue = 5,
                            Description = "Mediterranean pasta offers a delightful blend of flavors and textures.",
                            IdDish = 5,
                            Name = "Mediterranean Flavors"
                        });
                });

            modelBuilder.Entity("API.Entities.Plans.Diet.DietPlan", b =>
                {
                    b.Property<int>("IdDietPlan")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlanCalories")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdDietPlan");

                    b.HasIndex("IdUser");

                    b.ToTable("DietPlan", (string)null);
                });

            modelBuilder.Entity("API.Entities.Plans.Diet.Dish", b =>
                {
                    b.Property<int>("IdDish")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmountOfCaloriesInTheDish")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdCompositionOfNutritionalValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("IdDish");

                    b.ToTable("Dish", (string)null);

                    b.HasData(
                        new
                        {
                            IdDish = 1,
                            AmountOfCaloriesInTheDish = 350,
                            Description = "A healthy salad with grilled chicken breast.",
                            IdCompositionOfNutritionalValue = 1,
                            Name = "Grilled Chicken Salad"
                        },
                        new
                        {
                            IdDish = 2,
                            AmountOfCaloriesInTheDish = 250,
                            Description = "A stir-fried medley of fresh vegetables.",
                            IdCompositionOfNutritionalValue = 2,
                            Name = "Vegetable Stir-Fry"
                        },
                        new
                        {
                            IdDish = 3,
                            AmountOfCaloriesInTheDish = 400,
                            Description = "Oven-roasted salmon served with a side of roasted vegetables.",
                            IdCompositionOfNutritionalValue = 3,
                            Name = "Salmon with Roasted Vegetables"
                        },
                        new
                        {
                            IdDish = 4,
                            AmountOfCaloriesInTheDish = 300,
                            Description = "A nutritious salad with quinoa, vegetables, and vinaigrette dressing.",
                            IdCompositionOfNutritionalValue = 4,
                            Name = "Quinoa Salad"
                        },
                        new
                        {
                            IdDish = 5,
                            AmountOfCaloriesInTheDish = 450,
                            Description = "Pasta dish with tomatoes, olives, feta cheese, and herbs.",
                            IdCompositionOfNutritionalValue = 5,
                            Name = "Mediterranean Pasta"
                        });
                });

            modelBuilder.Entity("API.Entities.Plans.Diet.DishDietPlan", b =>
                {
                    b.Property<int>("IdDishDietPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdDietPlan")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdDish")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdDishDietPlan");

                    b.HasIndex("IdDietPlan");

                    b.HasIndex("IdDish");

                    b.ToTable("DishDietPlan", (string)null);
                });

            modelBuilder.Entity("API.Entities.Plans.Diet.Recipe", b =>
                {
                    b.Property<int>("IdRecipe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IngredientsNeeded")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StepsToCreate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdRecipe");

                    b.HasIndex("UserId");

                    b.ToTable("Recipe", (string)null);

                    b.HasData(
                        new
                        {
                            IdRecipe = 1,
                            Active = true,
                            IngredientsNeeded = "Spaghetti, Bacon, Eggs, Parmesan Cheese, Black Pepper",
                            Name = "Pasta Carbonara",
                            StepsToCreate = "1. Cook spaghetti according to package instructions. 2. Cook bacon in a pan until crispy. 3. In a bowl, whisk eggs and grated Parmesan cheese. 4. Drain cooked pasta and immediately toss with the egg mixture. 5. Add cooked bacon and black pepper. Mix well. 6. Serve hot."
                        },
                        new
                        {
                            IdRecipe = 2,
                            Active = true,
                            IngredientsNeeded = "Chicken Breast, Mixed Vegetables, Soy Sauce, Garlic, Ginger",
                            Name = "Chicken Stir-Fry",
                            StepsToCreate = "1. Cut chicken breast into small pieces. 2. Heat oil in a pan and add minced garlic and ginger. 3. Add chicken and stir-fry until cooked through. 4. Add mixed vegetables and cook until tender. 5. Season with soy sauce and stir well. 6. Serve hot with rice or noodles."
                        },
                        new
                        {
                            IdRecipe = 3,
                            Active = true,
                            IngredientsNeeded = "Tomatoes, Fresh Mozzarella Cheese, Basil Leaves, Olive Oil, Balsamic Vinegar",
                            Name = "Caprese Salad",
                            StepsToCreate = "1. Slice tomatoes and fresh mozzarella cheese. 2. Arrange tomato and mozzarella slices on a plate. 3. Tuck basil leaves between the slices. 4. Drizzle with olive oil and balsamic vinegar. 5. Season with salt and pepper, if desired. 6. Serve as a refreshing salad."
                        },
                        new
                        {
                            IdRecipe = 4,
                            Active = true,
                            IngredientsNeeded = "All-Purpose Flour, Butter, Brown Sugar, Granulated Sugar, Eggs, Vanilla Extract, Baking Soda, Salt, Chocolate Chips",
                            Name = "Chocolate Chip Cookies",
                            StepsToCreate = "1. Preheat the oven to 375°F (190°C). 2. In a mixing bowl, cream together butter, brown sugar, and granulated sugar. 3. Beat in eggs and vanilla extract. 4. In a separate bowl, whisk together flour, baking soda, and salt. 5. Gradually add the dry ingredients to the wet ingredients and mix well. 6. Stir in chocolate chips. 7. Drop rounded tablespoons of dough onto a baking sheet. 8. Bake for 8-10 minutes until lightly golden. 9. Allow the cookies to cool on a wire rack. 10. Enjoy delicious homemade cookies!"
                        },
                        new
                        {
                            IdRecipe = 5,
                            Active = true,
                            IngredientsNeeded = "Assorted Vegetables (e.g., potatoes, carrots, peas, bell peppers), Onion, Garlic, Ginger, Curry Powder, Coconut Milk",
                            Name = "Vegetable Curry",
                            StepsToCreate = "1. Chop the vegetables into bite-sized pieces. 2. Heat oil in a pan and sauté chopped onion, garlic, and ginger. 3. Add the vegetables and stir-fry for a few minutes. 4. Sprinkle curry powder over the vegetables and mix well. 5. Pour in coconut milk and simmer until the vegetables are cooked. 6. Season with salt and additional spices, if desired. 7. Serve hot with rice or naan bread."
                        });
                });

            modelBuilder.Entity("API.Entities.Plans.Traning.Exercise", b =>
                {
                    b.Property<int>("IdExercise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("MuscleGroups")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdExercise");

                    b.ToTable("Exercise", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("API.Entities.Plans.Traning.ExerciseTraningPlan", b =>
                {
                    b.Property<int>("IdExerciseTraningPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdExercise")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdTraningPlan")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdExerciseTraningPlan");

                    b.HasIndex("IdTraningPlan");

                    b.ToTable("ExerciseTraningPlan", (string)null);
                });

            modelBuilder.Entity("API.Entities.Plans.Traning.Instrument", b =>
                {
                    b.Property<int>("IdInstrument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("IdInstrument");

                    b.ToTable("Instrument", (string)null);

                    b.HasData(
                        new
                        {
                            IdInstrument = 1,
                            Name = "Dumbbells"
                        },
                        new
                        {
                            IdInstrument = 2,
                            Name = "Barbell"
                        },
                        new
                        {
                            IdInstrument = 3,
                            Name = "Kettlebell"
                        },
                        new
                        {
                            IdInstrument = 4,
                            Name = "Resistance Bands"
                        },
                        new
                        {
                            IdInstrument = 5,
                            Name = "Medicine Ball"
                        });
                });

            modelBuilder.Entity("API.Entities.Plans.Traning.TrainingPlan", b =>
                {
                    b.Property<int>("IdTrainingPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DegreeOfDifficulty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdAdminAndModerator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfRepetitions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfSeries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfTrainingDaysPerWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingLength")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdTrainingPlan");

                    b.HasIndex("IdAdminAndModerator");

                    b.HasIndex("IdUser");

                    b.ToTable("TrainingPlan", (string)null);
                });

            modelBuilder.Entity("ExerciseExerciseTraningPlan", b =>
                {
                    b.Property<int>("ExerciseTraningPlansIdExerciseTraningPlan")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExercisesIdExercise")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExerciseTraningPlansIdExerciseTraningPlan", "ExercisesIdExercise");

                    b.HasIndex("ExercisesIdExercise");

                    b.ToTable("ExerciseExerciseTraningPlan");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Entities.Plans.Traning.ExerciseWithTheDevice", b =>
                {
                    b.HasBaseType("API.Entities.Plans.Traning.Exercise");

                    b.Property<int>("IdInstrument")
                        .HasColumnType("INTEGER");

                    b.HasIndex("IdInstrument");

                    b.ToTable("ExerciseWithTheDevice", (string)null);

                    b.HasData(
                        new
                        {
                            IdExercise = 6,
                            Description = "A compound exercise for the upper body that primarily targets the chest, shoulders, and triceps.",
                            MuscleGroups = "Chest, Shoulders, Triceps",
                            Name = "Bench Press",
                            Photo = "benchpress.jpg",
                            Video = "benchpress.mp4",
                            IdInstrument = 1
                        },
                        new
                        {
                            IdExercise = 7,
                            Description = "An isolation exercise targeting the biceps using dumbbells.",
                            MuscleGroups = "Biceps",
                            Name = "Dumbbell Bicep Curls",
                            Photo = "bicepcurls.jpg",
                            Video = "bicepcurls.mp4",
                            IdInstrument = 2
                        },
                        new
                        {
                            IdExercise = 8,
                            Description = "A dynamic full-body exercise targeting the hips, glutes, and hamstrings.",
                            MuscleGroups = "Glutes, Hamstrings",
                            Name = "Kettlebell Swings",
                            Photo = "kettlebellswings.jpg",
                            Video = "kettlebellswings.mp4",
                            IdInstrument = 3
                        },
                        new
                        {
                            IdExercise = 9,
                            Description = "An upper body exercise targeting the back and biceps using a lat pulldown machine.",
                            MuscleGroups = "Back, Biceps",
                            Name = "Lat Pulldown",
                            Photo = "latpulldown.jpg",
                            Video = "latpulldown.mp4",
                            IdInstrument = 4
                        },
                        new
                        {
                            IdExercise = 10,
                            Description = "A compound exercise for the upper body that targets the upper chest, shoulders, and triceps.",
                            MuscleGroups = "Upper Chest, Shoulders, Triceps",
                            Name = "Incline Bench Press",
                            Photo = "inclinebenchpress.jpg",
                            Video = "inclinebenchpress.mp4",
                            IdInstrument = 4
                        });
                });

            modelBuilder.Entity("API.Entities.Plans.Traning.ExerciseWithoutTheDevice", b =>
                {
                    b.HasBaseType("API.Entities.Plans.Traning.Exercise");

                    b.ToTable("ExerciseWithoutTheDevice", (string)null);

                    b.HasData(
                        new
                        {
                            IdExercise = 1,
                            Description = "A classic bodyweight exercise targeting the chest, shoulders, and triceps.",
                            MuscleGroups = "Chest, Shoulders, Triceps",
                            Name = "Push-ups",
                            Photo = "pushups.jpg",
                            Video = "pushups.mp4"
                        },
                        new
                        {
                            IdExercise = 2,
                            Description = "A compound lower body exercise targeting the quadriceps, hamstrings, and glutes.",
                            MuscleGroups = "Quadriceps, Hamstrings, Glutes",
                            Name = "Squats",
                            Photo = "squats.jpg",
                            Video = "squats.mp4"
                        },
                        new
                        {
                            IdExercise = 3,
                            Description = "An isometric core exercise that strengthens the abs, back, and shoulders.",
                            MuscleGroups = "Abs, Back, Shoulders",
                            Name = "Plank",
                            Photo = "plank.jpg",
                            Video = "plank.mp4"
                        },
                        new
                        {
                            IdExercise = 4,
                            Description = "A compound lower body exercise targeting the quadriceps, hamstrings, and glutes.",
                            MuscleGroups = "Quadriceps, Hamstrings, Glutes",
                            Name = "Lunges",
                            Photo = "lunges.jpg",
                            Video = "lunges.mp4"
                        },
                        new
                        {
                            IdExercise = 5,
                            Description = "A full-body exercise that combines squats, push-ups, and jumps.",
                            MuscleGroups = "Chest, Shoulders, Legs, Abs",
                            Name = "Burpees",
                            Photo = "burpees.jpg",
                            Video = "burpees.mp4"
                        });
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.HasOne("API.Entities.Motivator", null)
                        .WithMany("Users")
                        .HasForeignKey("MotivatorIdMotivator");
                });

            modelBuilder.Entity("API.Entities.AppUserRole", b =>
                {
                    b.HasOne("API.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Plans.Diet.CompositionOfNutritionalValue", b =>
                {
                    b.HasOne("API.Entities.Plans.Diet.Dish", "Dish")
                        .WithOne("CompositionOfNutritionalValue")
                        .HasForeignKey("API.Entities.Plans.Diet.CompositionOfNutritionalValue", "IdCompositionOfNutritionalValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("API.Entities.Plans.Diet.DietPlan", b =>
                {
                    b.HasOne("API.Entities.AppUser", "AdminsAndModerator")
                        .WithMany("DietPlansAdmins")
                        .HasForeignKey("IdDietPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("DietPlans")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AdminsAndModerator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Plans.Diet.DishDietPlan", b =>
                {
                    b.HasOne("API.Entities.Plans.Diet.DietPlan", "DietPlan")
                        .WithMany("DishDietPlans")
                        .HasForeignKey("IdDietPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Plans.Diet.Dish", "Dish")
                        .WithMany("DishDietPlans")
                        .HasForeignKey("IdDish")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietPlan");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("API.Entities.Plans.Diet.Recipe", b =>
                {
                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Plans.Traning.ExerciseTraningPlan", b =>
                {
                    b.HasOne("API.Entities.Plans.Traning.TrainingPlan", "TrainingPlan")
                        .WithMany("ExerciseTraningPlans")
                        .HasForeignKey("IdTraningPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingPlan");
                });

            modelBuilder.Entity("API.Entities.Plans.Traning.TrainingPlan", b =>
                {
                    b.HasOne("API.Entities.AppUser", "AdminAndModerator")
                        .WithMany("TrainingPlansAdmins")
                        .HasForeignKey("IdAdminAndModerator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Users")
                        .WithMany("TrainingPlans")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminAndModerator");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ExerciseExerciseTraningPlan", b =>
                {
                    b.HasOne("API.Entities.Plans.Traning.ExerciseTraningPlan", null)
                        .WithMany()
                        .HasForeignKey("ExerciseTraningPlansIdExerciseTraningPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Plans.Traning.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisesIdExercise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("API.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.Plans.Traning.ExerciseWithTheDevice", b =>
                {
                    b.HasOne("API.Entities.Plans.Traning.Exercise", null)
                        .WithOne()
                        .HasForeignKey("API.Entities.Plans.Traning.ExerciseWithTheDevice", "IdExercise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Plans.Traning.Instrument", "Instrument")
                        .WithMany("ExerciseWithTheDevices")
                        .HasForeignKey("IdInstrument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("API.Entities.Plans.Traning.ExerciseWithoutTheDevice", b =>
                {
                    b.HasOne("API.Entities.Plans.Traning.Exercise", null)
                        .WithOne()
                        .HasForeignKey("API.Entities.Plans.Traning.ExerciseWithoutTheDevice", "IdExercise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("DietPlans");

                    b.Navigation("DietPlansAdmins");

                    b.Navigation("Recipes");

                    b.Navigation("TrainingPlans");

                    b.Navigation("TrainingPlansAdmins");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Entities.Motivator", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Entities.Plans.Diet.DietPlan", b =>
                {
                    b.Navigation("DishDietPlans");
                });

            modelBuilder.Entity("API.Entities.Plans.Diet.Dish", b =>
                {
                    b.Navigation("CompositionOfNutritionalValue")
                        .IsRequired();

                    b.Navigation("DishDietPlans");
                });

            modelBuilder.Entity("API.Entities.Plans.Traning.Instrument", b =>
                {
                    b.Navigation("ExerciseWithTheDevices");
                });

            modelBuilder.Entity("API.Entities.Plans.Traning.TrainingPlan", b =>
                {
                    b.Navigation("ExerciseTraningPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
